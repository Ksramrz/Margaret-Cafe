// This file shows the database schema structure for Margaret Caf√©
// PostgreSQL compatible schema for production

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?   @unique
  phoneVerified DateTime?
  password      String?   // For credentials authentication
  role          String    @default("USER") // USER or ADMIN
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  blogPosts BlogPost[]
  courses  Course[]
  enrollments CourseEnrollment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  nameFa      String
  description String?
  descriptionFa String?
  price       Int      // Price in Toman
  category    String
  type        String   @default("PHYSICAL") // PHYSICAL, DIGITAL, COURSE
  image       String?
  stock       Int      @default(0)
  featured    Boolean  @default(false) // For landing page display
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  status      String      @default("PENDING") // PENDING, PAID, SHIPPED, DELIVERED, CANCELLED
  total       Int         // Total in Toman
  paymentId   String?     // Zarinpal payment ID
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int    // Price at time of order

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model BlogPost {
  id            String     @id @default(cuid())
  title         String
  titleFa       String
  slug          String     @unique
  content       String
  contentFa     String
  excerpt       String
  excerptFa     String
  authorId      String
  category      String     // COFFEE, TEA, RECIPES, CULTURE, LIFESTYLE
  tags          String     // JSON string for tags
  publishedAt   DateTime?
  updatedAt     DateTime   @updatedAt
  readTime      Int
  featuredImage String?
  language      String     @default("FA") // EN or FA

  // Relations
  author User @relation(fields: [authorId], references: [id])
}

model Course {
  id          String     @id @default(cuid())
  title       String
  titleFa     String
  description String
  descriptionFa String
  price       Int        // Price in Toman
  level       String     // BEGINNER, INTERMEDIATE, ADVANCED
  duration    Int        // in minutes
  instructorId String
  thumbnail   String
  isPublished Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  instructor  User              @relation(fields: [instructorId], references: [id])
  lessons     Lesson[]
  enrollments CourseEnrollment[]
}

model Lesson {
  id       String @id @default(cuid())
  title    String
  titleFa  String
  description String
  descriptionFa String
  videoUrl String
  duration Int    // in minutes
  order    Int
  isFree   Boolean @default(false)
  courseId String

  // Relations
  course Course @relation(fields: [courseId], references: [id])
}

model CourseEnrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  enrolledAt DateTime @default(now())
  completedAt DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model VerificationCode {
  id        String   @id @default(cuid())
  phone     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("verification_codes")
}